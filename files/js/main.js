var $_eng_data={"示例":{a:"<div id='app'><p>{{value}}</p></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{value:"Hello Eng"}});"//尝试在下方控制台修改app.value的值";"//例: app.value=\'Nice to meet Eng\' 回车执行";',c:"",d:1,},"e-base":{a:"<div id='app'><div e-base='base1'><p>{{value}}</p><div e-base='base2'><p>{{value}}</p></div></div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{base1:{value:"我是基于 base1 的value值",base2:{value:"我是基于 base2 的value值"}}}});"//尝试在下方控制台修改app的值";"//例如: app.base1.value=1234567 回车执行";',c:"<p># e-base=baseName 	指令所在标签下所有子元素的值, 都是基于当前baseName.</p><p># {{baseName.value}} 这种写法是在Eng 中任何地方都是非法且不允许的, 今后也永远不会支持.</p><p># 作者认为这是散漫又不严谨的数据结构设计行为.不符合Eng '惯性逻辑思维' 的思想(数据结构 与 dom树结构 完全匹配 )</p>",d:1,},"e-attr":{a:"<div id='app'><div e-attr='class=v0'>txt</div><div e-attr='class=v1?(css1):(css2)'>txt</div><div e-attr='class=v2>=10?(css1):(css2)'>txt</div><div e-attr='class=v0;tittle=v3;atr=v2>=10?(css1):(css2)'> txt</div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v0:"css0",v1:true,v2:9,v3:"this is tittle"}});',c:"<p># e-attr 指令支持多个表达式, 所有行内属性</p><p># 其中三目运算是替换操作 ,另一个是覆盖操作</p><p># 当前版本中 (...) 外 不能有多余的 空格 ' ';</p><p># 当前版本中 (...) 内 不能有其它 分号 ';'</p>",d:1,},"e-html":{a:"<div id='app'><div e-html='v'></div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v:"<p>DOM 文本</p>"}});',c:"<p>#  e-html 指令下的子元素, 如包含有其它指令, 都不会被执行</p>",d:1,},"e-id":{a:"<div id='app'>\r<button e-id='idName' >Click me</button>\r</div>",b:'var app=new Eng({el:document.getElementById("app"),data:{},created:function(items){"//idName = idName.";items.idName.onclick=function(){alert("click me")}}});',c:"<p># e-id 指令不支持在e-for,以及 $_setToSelf中使用;</p><p># e-id=name , name命名唯一</p>",d:1,},"e-for":{a:"<div id='app'><div><p e-for='for1'>index = {{$_index}}  value= {{$_value}}</p></div><br><eng><p e-for='for2'> index = {{$_index}} .... {{v}}</p></eng><br><eng><div e-for='for3'>{{v}}<div e-for='for4' style='margin-left: 30px'>{{v}}</div></div></eng></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{for1:["a","b"],for2:[{v:"a"},{v:"b"},],for3:[{v:"I\'m for3 0",for4:[{v:"I\'m for4 0"},{v:"I\'m for4 1"}]},{v:"I\'m for3 1",for4:[{v:"I\'m for4 2"},{v:"I\'m for4 3"}]}]}});',c:"<p># Eng 为适应动态的 DOM 变化交互场景, 所有for元素都依赖其父元素进行定位.在没有确定的父标签,又需要确定的填充位置时,建议使用 &lt;eng&gt;...&lt;/eng&gt; 做为父标签包裹,同理也可以作为e-base的base父元素</p><p># e-for=name , 如果要使用 watcherFor 过滤器的话, 为了快速定位for对象,'name' 的命名在所有 for 对象中必须具有 唯一性 ;不打算使用过滤器,则所有合法的命名均适用.</p>",d:1,},"el":{a:"",b:'var domStr="<p>{{v}}</p>";var app=new Eng({el:domStr,data:{v:"我还支持 dom 文本数据模板"},created:function(items,cache){document.getElementById("html").appendChild(items.$_el)}});',c:"<p></p><p>#    el 既支持 dom节点 也支持 dom文本</p><p>#    生成的 dom 对象 在created(items)内,以参数 items.$_el获取</p>",d:1,},"watcher":{a:"<div id='app'><p>{{v1}}</p><div e-base='base'><p>{{v2}}</p></div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v1:123,base:{v2:456}},watcher:{"v1":function(oldValue,newValue,items,cache){if(newValue==123){items.$_value="v1 的值 ,被修改了"}},"base.v2":function(oldValue,newValue,items,cache){if(newValue==456){items.$_value="base.v2 的值 ,被修改了"}}}});',c:"<p># oldValue, newValue  //旧值 , 新值</p><p># items.$_value         //修改将要输出的值 </p><p># items.$_destroy=true; //销毁该 watcher 关系.</p><p># items.$_eng  &nbsp;&nbsp; . ( $_data , $_watcher , $_watcherFor , $_setToSelf , $_setToGlobal ...) </p><p># cache  用于自定义的全局数据缓存json对象</p>",d:1,},"watcherFor":{a:"<div id='app'><eng><p e-for='for1'>index = {{$_index}}   value = {{$_value}}</p></eng><br><eng><p e-for='for2'>index = {{$_index}}   value = {{v}}</p></eng></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{for1:[0,1,2,3,4,5],for2:[{v:0},{v:1},{v:2},{v:3},{v:4},{v:5}]},watcherFor:{for1:function(items,cache){if(items.$_data%2==0){items.$_allow=false}},for2:function(items,cache){if(items.$_data.v%2==1){items.$_allow=false}},},created:function(items,cache){}});',c:"<p># 之前提到过如果要使用该过滤器 ,为了快速定位for对象 ,for 对象 的命名必须具有唯一性.</p><p># items.$_data   当前被循环的数组元素数据</p><p># items.$_gData 全部数据</p><p># items.$_index   当前数据在被循环数组对象中的索引</p><p># items.$_forData 当前的被循环的数组对象</p><p># items.$_gIndex  当前循环体系在全局中的索引</p><p># items.$_watcher 用法等同于watcher ,作用域基于items.$_data</p><p># items.$_gWatcher 用法等同于watcher ,作用域基于全局根路径</p><p># items.$_allow   是否允许当前数据通过,默认为true</p><p># items.$_eng  &nbsp;&nbsp; . ( $_data , $_watcher , $_watcherFor , $_setToSelf , $_setToGlobal ...) </p><p># items.$_pos   当前数据对象在当前循环体系中的坐标</p><p># items.$_watcherFor( { for1:null } ) 再次注册为null,用于销毁已注册的双向关系</p><p># cache  用于自定义的全局数据缓存json对象</p>",d:1,},"$_watcher":{a:"<p id='app'>\r{{v}}\r</p>",b:'var app=new Eng({el:document.getElementById("app"),data:{v:"这是初始值,注册watcher后,再次修改才能触发条件,setTimeOut 3秒后触发"},created:function(items,cache){items.$_watcher({"v":function(oldValue,newValue,items,cache){if(newValue==123){items.$_value="$_watcher注册的watcher,再次修该数据时,才生效"}}})}});\r\r"//以下仅为延迟修改数据示例";$_set=setTimeout(function(){app.v=123},3000);',c:"<p>#    items.$_watcher 用法等同于 watcher  ,注册后 修改数据时才生效</p>",d:1,},"$_watcherFor":{a:"<div id='app'><p e-for='for1'>{{$_value}}</p></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{for1:[0,1,2,3,4,5,6,7,8]},created:function(items,cache){items.$_watcherFor({"for1":function(items,cache){if(items.$_data%2==1){items.$_allow=false}}})}});\r\r"//以下仅为延迟修改数据示例"$_set=setTimeout(function(){app.for1=[0,1,2,3,4,5,6,7,8];throw "$_watcherFor注册 watcherFor 关系后,再次修改数据时生效"},2000);',c:"<p>#    items.$_watcherFor 用法等同于 watcherFor , 修改数据时生效</p>",d:1,},"$_setToSelf":{a:"",b:'var app=new Eng({el:null,data:{},created:function(items,cache){\r\r var data={v:"$_setToSelf是一次性的,不支持数据绑定"};\r\r var domOrStr=\'<p e-attr="title={{v}}"> {{v}} </p>\';\r\r var dom=items.$_setToSelf(data,domOrStr);\r\r document.getElementById("html").appendChild(dom)}});',c:"<p># data: 合法的json数据 </p><p># domOrStr: dom节点 或 dom文本 ,不支持写入 e-id 和 e-for 指令,其它均支持</p><p># 生成的数据是一次性的, 不支持数据响应</p>",d:1,},"$_setToGlobal":{a:"",b:'var app=new Eng({el:null,data:{},created:function(items,cache){var data={v:"$_setToGlobal不是一次性的,支持数据绑定"};var domOrStr=\'<p e-attr="title={{v}}"> {{v}} </p>\';var dom=items.$_setToGlobal({el:domOrStr,key:"base",data:data,base:"",});document.getElementById("html").appendChild(dom)}});\r\r"//以下仅为控制台输出";throw"\\n$_setToGlobal支持数据绑定:\\napp.base.v = \'"+app.base.v+"\'";',c:"<p># el: dom 节点或文本 , 暂不支持写入e-id 和e-for 指令,其它均支持;</p><p># data: 合法的json 对象 </p><p># key:  data写入全局数据的 key 值命名 </p><p># base: 数据将要存储的位置 ,写法如:'base','base1.base2',忽略则添加到数据根目录</p><p># 已上三者的关系 等价于: app.base.key=data;</p><p># 支持数据绑定</p>",d:1,},"e-input":{a:"<div id='app'><p>{{v1}}</p>\r<input type='text' e-input='v2'>\r</div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v1:"",v2:"testValue"},watcher:{"v2":function(oldValue,newValue,items,cache){items.$_data.v1=newValue}}});\r\r"//此案例附加演示了一种双向绑定关系,请 尝试修改 input 框内的值 "',c:"<p># e-input 在oninput事件时触发</p>",d:1,},"e-change":{a:"<div id='app'><p>{{v1}}</p>\r<input type='text' e-change='v2'>\r</div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v1:"",v2:"testValue"},watcher:{"v2":function(oldValue,newValue,items,cache){items.$_data.v1=newValue}}});\r\r"//此案例附加演示了一种双向绑定关系 ,请 尝试修改 input 框内的值 "',c:"<p># e-change 在onchange事件时触发</p>",d:1,},"default":{a:"<p class='e_d'>Eng 是超轻量级的前后端数据渲染 与 插件开发 js框架,目前仅13kb</p><p class='e_d'>Eng 相对于主流 的angular ,vue ,react 拥有最低的学习曲线 ,更简易的实现方式,可以实现所提三者的所有基本功能</p><p class='e_d'>Eng 支持单向和 双向数据渲染</p><p class='e_d'>Eng 可以轻易的实现类似excel的 函数 乃至更复杂的数据逻辑渲染</p><p class='e_d'>Eng 可以轻易在循环数据中 对内或对全局 建立watcher 和 dom事件 双向关系</p><p class='e_d'>Eng 可以像jquery一样仅需理解基础的方法使用说明 , 便可自由运用</p>",b:'"# $_ 开头是Eng的专属命名作用域,请勿以此命名数据,避免冲突";_;"# 右上提到的需要服务端支持的功能,将在后续版本中开放";_;"# 下个更新中将可能开放支持数据双向绑定 ,所有dom事件均可拿到对应数据进行修改 ,并且可以调用组件的方法 ";_;"# Eng 的核心精髓和容易令新手迷惘的  是对于 watherFor 的理解, 只需掌握了该方法,Eng就等于理解了95%, 剩下的是您个人对于Eng的运用组合使用技巧, 在进阶/技巧 说明中 将陆续补充完善watcherFor的各项参数使用说明和案例 ";',c:"",d:2,e:1,},"Eng的开发思想(废话)":{a:"<p class='e_d'>Eng 的开发思想是基于 '面向逻辑架构编程'(低内聚高耦合), 是站在 '面向对象编程'(高内聚低耦合) 的另一个对立面的开发思想</p><p class='e_d'>'面向逻辑架构编程' 首先考虑应用场景的 内在关联性,既有规则规律. 整体通盘的设计代码逻辑规则规律结构, 将自身的思考方式,代码逻辑尽可能地融入应用场景.</p><p class='e_d'>优点:</p><p class='e_d'>就Eng而言 : 因为Eng的核心逻辑规律规则架构 与 浏览器处理dom的规则规律几乎一致 ,所以只需 掌握 Eng 的基本指令/选项用法 ,就可以像 jquery 一样自由的使用 ,偏重于如何组合运用的技巧 . 没有也不强迫灌输任何 新技术名词 和 理念, 抛弃所有同类工具中对Eng没有意义,完全不需要的东西.</p><p class='e_d'>就代码而言 : 大幅减少代码量,新功能的支持需要增加的代码量是可以预知,这就是为何敢于承诺:最终版(所有想要实现的)不会大于20kb的原因.</p><p class='e_d'>缺点:</p><p class='e_d'>思想桎梏 : 对于认为有万能的' 固化思想 ' 的coder ,是个噩梦 . 要求对应用场景环境的理解</p><p class='e_d'>就代码而言: 大部分方法逻辑与参数的使用像彼此紧密咬合的齿轮,是全局性的关联逻辑. 任何纰漏都可能造成需要全局性的逻辑查错.</p><p class='e_d'>坏习惯的养成 : 逻辑的高密度关联性,会养成能一目十行的时候,绝对不会把代码分二十行写. 注重逻辑实现,忽视精简参数方法的命名,形成紧凑型代码. 高度关联性的逻辑代码难以被简单备注说明,与其如此不如写短点,一目十行在脑子里跑.</p><p class='e_d'>因此,我的源码中大量的a1,a2,qwe,asd,f1,f2之类的自己习惯的视觉特征命名,几乎没有备注,所以稍后的几个版本之后,会专门提供一个研究开发版本.</p>",b:"",c:"",d:2,e:1},"说明":{a:"<p class='e_d'>Eng 取自 engine 的缩写,寓意可以向 引擎 一样快而简的将 '数据结构' 与 'dom结构' 紧密的契合驱动,以 '惯性思维' 的方式,在大多数场景下化繁就简的处理数据及dom交互.</p><p class='e_d'>Eng 是超轻量级的前后端 组件化数据渲染 以及 插件 开发解决方案, 目前仅有 12kb ,已然就可以实现 angular, vue 和 react等, 前端工具本地端所有常用功能</p><p class='e_d'>Eng 拥有不逊色于所有同类软件的优异性能,以及最低的学习曲线.</p>",b:"",c:"",d:2},"关于作者":{a:"<p class='e_d'>作者是个有想法的人. 不屑一切将事情复杂化的东西或人.</p><p class='e_d'>作者怀疑一切, 甚至自己, 所以不相信走在前人的道路上的每一步都是站在巨人的肩膀上, 完全有可能掉到前人制造的大山山凹里坐井观天.</p><p class='e_d'>作者认为事物本身的复杂是 '客观' 的存在, 但解决事物的方法的 本身复杂程度是  '主观' 的 </p><p class='e_d'>作者认为观察事物的角度, 接触事物的深度, 思考问题的方式, 以及对权威的盲从, 思考的惰性会让我们对同一件事物产生不同的解决方案.  如果!! 我们有自己的思想 ,不是继承或洗脑而来的话...</p>",b:"",c:"",d:2,},"0.8.*":{a:"<p class='e_d'>1. Eng 0.8版本只有5个基本指令和5个选项方法.虽然个别使用场景下,欠缺基本支持,但已经可以实现大多数场景下的数据渲染以及相关插件的开发.</p><p class='e_d'>2. 当然如果你理解深刻 ,有想法,并有一定的动手能力 ,围绕这10个基本指令选项和方法,已然可以实现angular,vue和react的本地端大部分基本功能.</p><p class='e_d'>3. Eng 之后版本的功能, 以及服务端的支持,将会在 '版本前瞻' 中部分说明.</p>",b:"",c:"",d:2},"0.9.*":{a:"<p class='e_d'>1. 0.9版本新增了 e-input 和 e-change 用于可以触发oninput和onchange事件的元素</p><p class='e_d'>2. whatcher,$_whatcher,watcherFor和$_watcherFor 返回一些新的属性和方法支持,可以基于此实现类似excel的函数关系表达</p><p class='e_d'>3. 已上四个选项新增一个cacheArea 的json对象参数 ,用于储存自定义的全局数据,便于逻辑表达</p>	 ",b:"",c:"",d:2},"0.9.1":{a:"<p class='e_d'>1. 新增 e-event 指令</p><p class='e_d'>2. 该指令用于绑定dom事件  ,实现事件驱动的 单向或多向 数据操作 </p><p class='e_d'>3. 修复9.0 中 $_setToGlobal 的 bug </p>",b:"",c:"",d:2},"watcherFor (1)":{a:"<div id='app'><table width='400' border='1' class='table'><tr><td>Name</td><td>Age</td><td>\rSex (♂ : <span class='red-bg'></span> ♀ : <span class='green-bg'></span>)\r</td></tr><tr e-for='students'><td>{{name}}</td><td>{{age}}</td><td><span e-attr='class={{sex}}'></span></td></tr></table></div>",b:'"# watcherFor 中 可以任意操作修改当前数据";var app=new Eng({el:document.getElementById("app"),data:{students:[{name:"David",age:"15",sex:"boy"},{name:"Alice",age:"14",sex:"girl"},]},watcherFor:{"students":function(items,cache){"# 这里sex作为class样式值输出, 判断sex的原始值修改为对应的class值";if(items.$_data.sex=="boy"){items.$_data.sex="red-bg"}if(items.$_data.sex=="girl"){items.$_data.sex="green-bg"}}}});',c:"<p># watcherFor 中 可以任意操作修改当前数据</p>",d:1},"watcherFor (2)":{a:"<div id='app'><table width='600' border='1' class='table'><tr><td width='180'>Name</td><td>Age</td><td>请输入学生姓名</td></tr><tr e-for='students'><td>{{name}}</td><td>{{age}}</td><td>\r<input e-input='input' type='text' class='max-size' placeholder=\"enter the name\">\r</td></tr></table></div>",b:'"# watcherFor 与 items.$_watcher";"# 此案例演示: for循环内的数据间 如何建立 双向关系 ";var app=new Eng({el:document.getElementById("app"),data:{students:[{name:"",age:"15",input:""},{name:"",age:"14",input:""},]},watcherFor:{"students":function(items,cache){ "# 这里 \'input\' 的 实际完整路径是 \'students . index . input\' Eng隐式的补全了";"# $_watcher 的base路径 只有在for里是特殊的,有隐式补全的";"# $_gWatcher 不受此影响,base作用于数据根路径,参考下个案例";"# 此处 是将input 的输入值与 name 相关联";items.$_watcher({"input":function(oldValue,newValue,items2,cache){items.$_data.name=newValue}})}}});',c:"<p>在watcherFor 内:</p><p># $_watcher={ base : function(){} }中的base 的数据地址 是当前数组元素的路径地址 加上当前输入的路径地址 只作用于当前对象内</p><p># $_gWatcher={ base : function(){} }中的base 数据地址是基于全局data的根目录</p>",d:1},"watcherFor (3)":{a:"<div id='app'><h3 e-base='base' align='center'>输入修改值:<input e-input='input'></h3><table width='600' border='1' class='table'><tr><td width='180'>Name</td><td>Age</td></tr><tr e-for='students'><td>{{name}}</td><td>{{age}}</td></tr></table></div>",b:'"# watcherFor  与  items.$_gWatcher";"# 当前演示: for循环内 $_gWatcher 与 $_watcher的 区别 ,基于上个案例";var app=new Eng({el:document.getElementById("app"),data:{base:{input:""},students:[{name:"张三",age:"15",},{name:"李四",age:"17",}],},watcherFor:{"students":function(items,cache){if(items.$_data.name=="李四"){"# 当name 是李四的时候,循环外的 base.input 的值与李四的age值建立双向关系,用于修改年龄";"# 这里$_gWatcher的 base 路径是从数据的根目录开始的所以为\'base.input\' ";items.$_gWatcher({"base.input":function(oldValue,newValue,items2,cache){items.$_data.age=newValue}})}},}});',c:"",d:1},"watcherFor (4 坐标关系)":{a:"<div style='display:none'><div><div e-for='forA'><div><div e-for='childFor'></div></div></div></div><div><div e-for='forB'></div></div></div>\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r<svg width='600' height='500'><path d='m 70 20 l 420 0 l 0 215 l -420 0 l 0 -215' style='stroke:#c153da;stroke-width:2' fill='none'></path><text x='150' y='25' fill='#55F0DA' style='font-weight:bolder;font-size:18px'>$_gIndex = 0</text><text x='85' y='100' fill='#51F951'>forA</text><rect x='80' y='120' width='50' height='70' stroke='red' fill='none'></rect><text x='82' y='140' fill='#3E8DDB'>data1</text><text x='140' y='140' fill='yellow'>$_pos=[0]</text><text x='82' y='175' fill='#3E8DDB'>data2</text><text x='140' y='175' fill='yellow'>$_pos=[1]</text><line x1='220' y1='133' x2='295' y2='80' stroke='red'></line><line x1='220' y1='137' x2='295' y2='110' stroke='red'></line><line x1='220' y1='168' x2='295' y2='170' stroke='red'></line><line x1='220' y1='172' x2='295' y2='210' stroke='red'></line><text x='302' y='50' fill='#51F951'>childFor</text><rect x='300' y='60' width='50' height='70' stroke='red' fill='none'></rect><text x='302' y='80' fill='#3E8DDB'>data1</text><text x='372' y='80' fill='yellow'>$_pos=[0,0]</text><text x='302' y='115' fill='#3E8DDB'>data2</text><text x='372' y='115' fill='yellow'>$_pos=[0,1]</text><rect x='300' y='160' width='50' height='70' stroke='red' fill='none'></rect><text x='302' y='180' fill='#3E8DDB'>data1</text><text x='372' y='180' fill='yellow'>$_pos=[1,0]</text><text x='302' y='215' fill='#3E8DDB'>data2</text><text x='372' y='215' fill='yellow'>$_pos=[1,1]</text><path d='m 70 280 l 420 0 l 0 160 l -420 0 l 0 -160' style='stroke:#c153da;stroke-width:2' fill='none'></path><text x='150' y='285' fill='#55F0DA' style='font-weight:bolder;font-size:18px'>$_gIndex = 1</text><text x='85' y='320' fill='#51F951'>forB</text><rect x='80' y='330' width='50' height='100' stroke='red' fill='none'></rect><text x='82' y='350' fill='#3E8DDB'>data1</text><text x='140' y='350' fill='yellow'>$_pos=[0]</text><text x='82' y='385' fill='#3E8DDB'>data2</text><text x='140' y='385' fill='yellow'>$_pos=[1]</text><text x='82' y='420' fill='#3E8DDB'>data2</text><text x='140' y='420' fill='yellow'>$_pos=[2]</text></svg>",b:'"# watcherFor 中的 items.$_pos 与 items.$_gIndex ";"# 假设for 循环的data数据如下";"";"# 在Eng 对象中,参照上面的 html 部分 ,$_gIndex 是由 祖先元素的for数量决定的, 按照浏览器解析dom的顺序(自上而下,自父而子),最先被解析的祖先for元素是 \'forA\' ,所以forA 所在坐标系的 $_gIndex=0 ,forB 的 $_gIndex=1";"";"# 说到这里我想 $_pos 就不用赘述了";"# $_pos , $_gIndex 用于建立复杂逻辑关系时的坐标参照";var data={forA:[{childFor:[]},{childFor:[]},],forB:[0,1,2]};',c:"",d:1},"e-event":{a:'<div id="app"><div style="margin:20px"><p>x = {{x}}</p><button e-event="onclick:addition1">Click x++</button></div><div e-base="base" style="margin:20px"><p>y = {{y}}</p><button e-event="onclick:addition2">Click y+=2</button></div></div>',b:'var app=new Eng({el:document.getElementById("app"),data:{x:0,base:{y:1}},event:{addition1:function(){this.$_data.x++},addition2:function(){this.$_data.y+=2}}});',c:'<p># e-event ="onclick:function" 的属性值内不能包含空格,":" 号前为原生js方法,后面为event 内声明的事件</p><p># this.$_data : 当前base作用域内的数据</p><p># this.$_gData : 全部数据</p><p># this.$_eng : 包含所有当前组件的选项/方法 : ($_cache , $_el , $_event , $_setToGlobal , $_setToSelf , $_watcher , $_watcherFor)</p>',d:1},"e-event (1)":{a:'<div id="app" style="margin:30px"><p e-attr="class=color">Color</p>\r<button e-event="onclick:changeColor">change-color</button>\r</div>',b:'"# e-event 与 cache";"# 当前演示用cache 内 colorFlag布尔值, 通过dom 事件修改class样式";var app=new Eng({el:document.getElementById("app"),data:{color:"green"},cache:{colorFlag:true},event:{changeColor:function(){if(this.$_cache.colorFlag){this.$_cache.colorFlag=false;this.$_data.color="yellow"}else{this.$_cache.colorFlag=true;this.$_data.color="green"}}}});',c:"",d:1},"e-event (2)":{a:'<div id="app" style="margin:30px"><div e-for="forData" style="border:1px solid #ff0;margin:5px"><p>{{v}}</p><p e-base="base" style="margin-left:20px">{{v}}</p><button e-event="onclick:click">click {{$_index}}</button></div></div>',b:'"# e-event 与  e-for";"# 解释 for 循环内 this.$_data ";var app=new Eng({el:document.getElementById("app"),data:{forData:[{v:"1",base:{v:"2"}},{v:"3",base:{v:"4"}}]},event:{click:function(){var v1,v2;v1=this.$_data.v;v2=this.$_data.base.v;"//for循环内的 this.$_data 是基于当前被循环的数组元素 ,不是基于 \'base\'";this.$_data.v=v2;this.$_data.base.v=v1}}});',c:"",d:1}," ":{a:"",b:"",c:"",d:1},"0.8..":{a:"<p class='e_d'>finished</p>",b:"",c:"",d:2},"0.9..":{a:"<p class='e_d'>finishing</p>",b:"",c:"",d:2},"1.0..":{a:"<p class='e_d'>readying</p>",b:"",c:"",d:2},"服务端支持搁置":{a:"<p class='e_d'>readying</p>",b:"",c:"",d:2},"概要":{a:"<p class='e_d'>1. 版本稳定后 会提供一个开发版本</p><p class='e_d'>2. 后续,将会提供一个sever端的工具,支持将dom文本压缩成 Eng 可以识别的json对象,减少网络数据传输,加速dom和数据的首次生成渲染效率</p><p class='e_d'>3. 将 支持 \"组件行为\", 允许单独在页面内定义组件对象, Eng 会向服务端 或 本地 请求该对象的所有素材,生成完整的组件..</p><p class='e_d'>4. $_setToGlobal()和 $_setToSelf 将有可能将支持 写入e-id 和e-for 指令,如果有必要的话</p><p class='e_d'>5. 将 原生的 支持数据分页</p><p class='e_d'>6. 将 支持数据 撤销 和 重做操作, 允许记录一定步数的数据操作</p><p class='e_d'>7. 0.9版本中已经可以实现类似Excel的函数功能 ,将提供一套Eng专有的简洁的函数公式,简化复杂逻辑的表单关系表达</p><p class='e_d'>8. 将 支持 数据比对,仅提交已修改的数据,减少服务器端重复计算(有必要的话)</p>",b:"",c:"<p># Eng 做为超轻量化的数据渲染框架 , 最终完成版的本地端体积将会控制在 20kb左右或以内</p>",d:2},};var $_eng_data2={"basic example":{a:"<div id='app'><p>{{value}}</p></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{value:"Hello Eng"}});"//Try to modify the value of \'app.value\' in the console below";"//Ex. :app.value=\'Nice to meet Eng\' Press enter to perform";',c:"",d:1,},"e-base":{a:"<div id='app'><div e-base='base1'><p>{{value}}</p><div e-base='base2'><p>{{value}}</p></div></div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{base1:{value:"I\'m based on the value of base1",base2:{value:"I\'m based on the value of base2"}}}});"//Try to modify the value of \'app\' in the console below";"//Ex：app.base1.value=1234567  Press enter to perform";',c:"<p># e-base=baseName :	The value of all child elements under the instruction TAB is based on the current baseName.</p><p># {{baseName.value}} This is illegal and not allowed anywhere in Eng, and will never be supported.</p><p># The author believes that this is a loose and imprecise data structure design behavior that does not conform to the design concept of Eng</p>",d:1,},"e-attr":{a:"<div id='app'><div e-attr='class=v0'>txt</div><div e-attr='class=v1?(css1):(css2)'>txt</div><div e-attr='class=v2>=10?(css1):(css2)'>txt</div><div e-attr='class=v0;tittle=v3;atr=v2>=10?(css1):(css2)'> txt</div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v0:"css0",v1:true,v2:9,v3:"this is tittle"}});',c:"<p># e-attr Instructions support multiple expressions, all inline attributes</p><p># One of the 'ternary operator' is the substitution operation and the other is the override operation</p><p># In the current version, except (...)There must be no extra space;</p><p># In the current version (...)There is no other semicolon</p>",d:1,},"e-html":{a:"<div id='app'><div e-html='v'></div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v:"<p>DOM text</p>"}});',c:"<p># e-html : Child elements under instruction, such as those containing other instructions, will not be executed</p>",d:1,},"e-id":{a:"<div id='app'>\r<button e-id='idName' >Click me</button>\r</div>",b:'var app=new Eng({el:document.getElementById("app"),data:{},created:function(items){"//idName = idName.";items.idName.onclick=function(){alert("click me")}}});',c:"<p># e-id Instructions do not support using in e-for and $_setToSelf;</p><p># e-id=name , 'name' Name is the only one</p>",d:1,},"e-for":{a:"<div id='app'><div><p e-for='for1'>index = {{$_index}}  value= {{$_value}}</p></div><br><eng><p e-for='for2'> index = {{$_index}} .... {{v}}</p></eng><br><eng><div e-for='for3'>{{v}}<div e-for='for4' style='margin-left: 30px'>{{v}}</div></div></eng></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{for1:["a","b"],for2:[{v:"a"},{v:"b"},],for3:[{v:"I\'m for3 0",for4:[{v:"I\'m for4 0"},{v:"I\'m for4 1"}]},{v:"I\'m for3 1",for4:[{v:"I\'m for4 2"},{v:"I\'m for4 3"}]}]}});',c:'<p># Eng is adaptive to the dynamic DOM change interaction scenario, all "for" elements are dependent on the parent element for positioning. In the absence of a confirmed parent label, and in need of a determined filling position, the recommended use of &lt;eng&gt;...&lt;/eng&gt; as the parent tag package, also can be used as the parent element of "e-base"</p><p># e-for=name : If you want to use the "watcherFor" filter, to quickly locate the "for" object, the name of \'name\' must be unique in all the \'for\' objects;Not intended to use a filter, all legal names apply</p>',d:1,},"el":{a:"",b:'var domStr="<p>{{v}}</p>";var app=new Eng({el:domStr,data:{v:"I also support dom text templates"},created:function(items,cache){document.getElementById("html").appendChild(items.$_el)}});',c:'<p></p><p>#   el : It supports dom nodes as well as dom text</p><p># The generated dom object is retrieved in the "created(items)" with the parameter " items.$_el "</p>',d:1,},"watcher":{a:"<div id='app'><p>{{v1}}</p><div e-base='base'><p>{{v2}}</p></div></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v1:123,base:{v2:456}},watcher:{"v1":function(oldValue,newValue,items,cache){if(newValue==123){items.$_value="The value of v1 was modified"}},"base.v2":function(oldValue,newValue,items,cache){if(newValue==456){items.$_value="The value of base.v2 has been modified"}}}});',c:'<p># items.$_value : //modify the value to be output</p><p># items.$_destroy=true : //destroy the "watcher" relationship</p><p># items.$_eng  &nbsp;&nbsp; . ( $_data , $_watcher , $_watcherFor , $_setToSelf , $_setToGlobal ...) </p><p># cache : is used to cache json objects for custom global data</p>',d:1,},"watcherFor":{a:"<div id='app'><eng><p e-for='for1'>index = {{$_index}}   value = {{$_value}}</p></eng><br><eng><p e-for='for2'>index = {{$_index}}   value = {{v}}</p></eng></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{for1:[0,1,2,3,4,5],for2:[{v:0},{v:1},{v:2},{v:3},{v:4},{v:5}]},watcherFor:{for1:function(items,cache){if(items.$_data%2==0){items.$_allow=false}},for2:function(items,cache){if(items.$_data.v%2==1){items.$_allow=false}},},created:function(items,cache){}});',c:"<p># As previously mentioned, if you want to use 'watcherFor', the naming of the 'for' object must be unique in order to quickly locate the 'for' object.</p><p># items.$_data : The data of the currently loop array element</p><p># items.$_gData : Global data</p><p># items.$_index : The index of the current data object.</p><p># items.$_forData The currently circulating array object</p><p># items.$_gIndex : The index of the current loop in the global</p><p># items.$_watcher :  The same as watcher, and the scope is based on items.$_data</p><p># items.$_gWatcher : The same as watcher , and the scope is based on the global root path</p><p># items.$_allow : Whether the current data is allowed is passed and defaults to true.</p><p># items.$_eng  &nbsp;&nbsp; . ( $_data , $_watcher , $_watcherFor , $_setToSelf , $_setToGlobal ...) </p><p># items.$_pos : Coordinates of the current data in the current loop system</p><p># items.$_watcherFor( { for1:null } ) Register again as null for destruction of registered two-way relationships</p><p># cache : lobal data cache JSON object for customization</p>",d:1,},"$_watcher":{a:"<p id='app'>\r{{v}}\r</p>",b:'var app=new Eng({el:document.getElementById("app"),data:{v:"This is the initial value. After registering the watcher, it can be modified again to trigger it"},created:function(items,cache){items.$_watcher({"v":function(oldValue,newValue,items,cache){if(newValue==123){items.$_value="123 of the data has been modified by me"}}})}});\r\r"//Modify data by timer delay example";$_set=setTimeout(function(){app.v=123},3000);',c:"<p># items.$_watcher : The same as 'watcher' ,Modify data to take effect</p>",d:1,},"$_watcherFor":{a:"<div id='app'><p e-for='for1'>{{$_value}}</p></div>",b:'var app=new Eng({el:document.getElementById("app"),data:{for1:[0,1,2,3,4,5,6,7,8]},created:function(items,cache){items.$_watcherFor({"for1":function(items,cache){if(items.$_data%2==1){items.$_allow=false}}})}});\r\r"//Modify data by timer delay example"$_set=setTimeout(function(){app.for1=[0,1,2,3,4,5,6,7,8]},2000);',c:"<p># items.$_watcherFor : The same as 'watcherFor' ,Modify data to take effect</p>",d:1,},"$_setToSelf":{a:"",b:'var app=new Eng({el:null,data:{},created:function(items,cache){\r\r var data={v:"$_setToSelf is one-time and does not support data response"};\r\r var domOrStr=\'<p e-attr="title={{v}}"> {{v}} </p>\';\r\r var dom=items.$_setToSelf(data,domOrStr);\r\r document.getElementById("html").appendChild(dom)}});',c:"<p># data : Legal JSON data </p><p># domOrStr: DOM node or DOM text , it's not support 'e-id' and 'e-for' </p><p># The generated data is one-time and does not support data response</p>",d:1,},"$_setToGlobal":{a:"",b:'var app=new Eng({el:null,data:{},created:function(items,cache){var data={v:"$_setToGlobal is not one-time and  support data response"};var domOrStr=\'<p e-attr="title={{v}}"> {{v}} </p>\';var dom=items.$_setToGlobal({el:domOrStr,key:"base",data:data,base:"",});document.getElementById("html").appendChild(dom)}});',c:"<p># el : DOM node or DOM text , it's not support 'e-for'</p><p># data : Legal JSON data</p><p># key: The key naming of 'data' </p><p># base : Data storage path ,EX:'base','base1.base2',Ignore is added to the data root directory</p><p># The relation between the three parties is equivalent to : app.base.key=data;</p><p># Support data response</p>",d:1,},"e-input":{a:"<div id='app'><p>{{v1}}</p>\r<input type='text' e-input='v2'>\r</div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v1:"",v2:"testValue"},watcher:{"v2":function(oldValue,newValue,items,cache){items.$_data.v1=newValue}}});\r\r"//This example demonstrates a two-way binding relationship, and try to modify the values in the input box "',c:"<p># e-input is triggered when the 'oninput' event</p>",d:1,},"e-change":{a:"<div id='app'><p>{{v1}}</p>\r<input type='text' e-change='v2'>\r</div>",b:'var app=new Eng({el:document.getElementById("app"),data:{v1:"",v2:"testValue"},watcher:{"v2":function(oldValue,newValue,items,cache){items.$_data.v1=newValue}}});\r\r"//This example demonstrates a two-way binding relationship, and try to modify the values in the input box"',c:"<p># e-change  is triggered when the 'onchange' event</p>",d:1,},"default":{a:"<p class='e_d'> Eng is a lightweight data rendering and plug-in development javascript framework, currently only 13kb</p><p class='e_d'>With the lowest learning curve and easier implementation, Eng has the lowest learning curve, and can realize all the basic functions of the angular ,vue and react.</p><p class='e_d'>Eng supports one-way and two-way data rendering.</p><p class='e_d'>Eng can easily implement functions like Excel and even more complex data logic rendering</p><p class='e_d'>Eng can easily set up 'watcher' and Dom events in the loop data either internally or global</p><p class='e_d'>Eng ,like jQuery, only needs to know the basic methods and then be free to use</p>",b:'"# The \'$_\' beginning is the exclusive domain name of Eng, do not use this to name data, avoid conflict.";_;"# The features mentioned on the right that require server-side support will be available in subsequent releases";_;"# The core essence of ’Eng’ and let the novice confused is ’watherFor’, just only try to understand the method, Eng is equal to grasp the 95%. The rest is your personal for Eng use use a combination of skills, in the introduction to advanced/skills will complement watcherFor instructions and various parameters of cases.";',c:"",d:2,e:1,},"关于作者":{a:"<p class='e_d'>The author is a man of ideas. Disdain to complicate things.</p><p class='e_d'>Authors suspect everything, even yourself, so don't believe that every step is on the shoulders of giants, it is entirely possible that has fallen into the cove former made so as to have a very narrow view.</p><p class='e_d'>The author thinks that the complexity of things is' objective ', but the complexity of the method of solving things is' subjective '. </p><p class='e_d'>The author thinks that point of view to observe things , the depth of the contact things, the way of thinking , as well as to the authority blindly follow, the  inertia of thinking will make us have different solution on the same thing. If !! We have our own thoughts, not inherited or brainwashed...</p>",b:"",c:"",d:2,},"0.8.*":{a:"<p class='e_d'>1. Eng 0.8版本只有5个基本指令和5个选项方法.虽然个别使用场景下,欠缺基本支持,但已经可以实现大多数场景下的数据渲染以及相关插件的开发.</p><p class='e_d'>2. 当然如果你理解深刻 ,有想法,并有一定的动手能力 ,围绕这10个基本指令选项和方法,已然可以实现angular,vue和react的本地端大部分基本功能.</p><p class='e_d'>3. Eng 之后版本的功能, 以及服务端的支持,将会在 '版本前瞻' 中部分说明.</p>",b:"",c:"",d:2},"0.9.*":{a:"<p class='e_d'>1. 0.9版本新增了 e-input 和 e-change 用于可以触发oninput和onchange事件的元素</p><p class='e_d'>2. whatcher,$_whatcher,watcherFor和$_watcherFor 返回一些新的属性和方法支持,可以基于此实现类似excel的函数关系表达</p><p class='e_d'>3. 已上四个选项新增一个cacheArea 的json对象参数 ,用于储存自定义的全局数据,便于逻辑表达</p>	 ",b:"",c:"",d:2},"0.9.1":{a:"<p class='e_d'>1. Add e-event instruction</p><p class='e_d'>2. This instruction is used to bind DOM events to achieve event driven unidirectional or multidirectional data manipulation </p><p class='e_d'>3. Fixed the error of '$_setToGlobal'  in 9.0 </p>",b:"",c:"",d:2},"watcherFor (1)":{a:"<div id='app'><table width='400' border='1' class='table'><tr><td>Name</td><td>Age</td><td>\rSex (♂ : <span class='red-bg'></span> ♀ : <span class='green-bg'></span>)\r</td></tr><tr e-for='students'><td>{{name}}</td><td>{{age}}</td><td><span e-attr='class={{sex}}'></span></td></tr></table></div>",b:'"# \'watcherFor\' allows you to modify the current data in any way";var app=new Eng({el:document.getElementById("app"),data:{students:[{name:"David",age:"15",sex:"boy"},{name:"Alice",age:"14",sex:"girl"},]},watcherFor:{"students":function(items,cache){"# Here,\'sex\' is used as the \'class\' style value output, modified as the corresponding \'class\' value based on the original value of the \'sex\'";if(items.$_data.sex=="boy"){items.$_data.sex="red-bg"}if(items.$_data.sex=="girl"){items.$_data.sex="green-bg"}}}});',c:"<p># watcherFor 中 可以任意操作修改当前数据</p>",d:1},"watcherFor (2)":{a:"<div id='app'><table width='600' border='1' class='table'><tr><td width='180'>Name</td><td>Age</td><td>Please enter the student's name</td></tr><tr e-for='students'><td>{{name}}</td><td>{{age}}</td><td>\r<input e-input='input' type='text' class='max-size' placeholder=\"enter the name\">\r</td></tr></table></div>",b:'"# watcherFor with items.$_watcher";"# this case demonstrates: how to establish a two-way relationship between data in the for loop ";var app=new Eng({el:document.getElementById("app"),data:{students:[{name:"",age:"15",input:""},{name:"",age:"14",input:""},]},watcherFor:{"students":function(items,cache){items.$_watcher({"input":function(oldValue,newValue,items2,cache){items.$_data.name=newValue}})}}});',c:"<p> In 'watcherFor' :</p><p># $_watcher={ base : function(){} } : The data address of the 'base' is the path address of the current array element, plus the current input path address, which acts only in the current object.</p><p># $_gWatcher={ base : function(){} } : The address of 'base' is based on the root directory of the global data</p>",d:1},"watcherFor (3)":{a:"<div id='app'><h3 e-base='base' align='center'>输入修改值:<input e-input='input'></h3><table width='600' border='1' class='table'><tr><td width='180'>Name</td><td>Age</td></tr><tr e-for='students'><td>{{name}}</td><td>{{age}}</td></tr></table></div>",b:'"# watcherFor with items.$_gWatcher";"# current demonstration: the difference between $_gWatcher and $_watcher in the for loop, based on the previous case";var app=new Eng({el:document.getElementById("app"),data:{base:{input:""},students:[{name:"Lucy",age:"15",},{name:"Steve",age:"17",}],},watcherFor:{"students":function(items,cache){if(items.$_data.name=="Steve"){items.$_gWatcher({"base.input":function(oldValue,newValue,items2,cache){items.$_data.age=newValue}})}},}});',c:"",d:1},"watcherFor (4 Coordinate relation)":{a:"<div style='display:none'><div><div e-for='forA'><div><div e-for='childFor'></div></div></div></div>\r\r\r<div><div e-for='forB'></div></div></div>\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r<svg width='600' height='500'><path d='m 70 20 l 420 0 l 0 215 l -420 0 l 0 -215' style='stroke:#c153da;stroke-width:2' fill='none'></path><text x='150' y='25' fill='#55F0DA' style='font-weight:bolder;font-size:18px'>$_gIndex = 0</text><text x='85' y='100' fill='#51F951'>forA</text><rect x='80' y='120' width='50' height='70' stroke='red' fill='none'></rect><text x='82' y='140' fill='#3E8DDB'>data1</text><text x='140' y='140' fill='yellow'>$_pos=[0]</text><text x='82' y='175' fill='#3E8DDB'>data2</text><text x='140' y='175' fill='yellow'>$_pos=[1]</text><line x1='220' y1='133' x2='295' y2='80' stroke='red'></line><line x1='220' y1='137' x2='295' y2='110' stroke='red'></line><line x1='220' y1='168' x2='295' y2='170' stroke='red'></line><line x1='220' y1='172' x2='295' y2='210' stroke='red'></line><text x='302' y='50' fill='#51F951'>childFor</text><rect x='300' y='60' width='50' height='70' stroke='red' fill='none'></rect><text x='302' y='80' fill='#3E8DDB'>data1</text><text x='372' y='80' fill='yellow'>$_pos=[0,0]</text><text x='302' y='115' fill='#3E8DDB'>data2</text><text x='372' y='115' fill='yellow'>$_pos=[0,1]</text><rect x='300' y='160' width='50' height='70' stroke='red' fill='none'></rect><text x='302' y='180' fill='#3E8DDB'>data1</text><text x='372' y='180' fill='yellow'>$_pos=[1,0]</text><text x='302' y='215' fill='#3E8DDB'>data2</text><text x='372' y='215' fill='yellow'>$_pos=[1,1]</text><path d='m 70 280 l 420 0 l 0 160 l -420 0 l 0 -160' style='stroke:#c153da;stroke-width:2' fill='none'></path><text x='150' y='285' fill='#55F0DA' style='font-weight:bolder;font-size:18px'>$_gIndex = 1</text><text x='85' y='320' fill='#51F951'>forB</text><rect x='80' y='330' width='50' height='100' stroke='red' fill='none'></rect><text x='82' y='350' fill='#3E8DDB'>data1</text><text x='140' y='350' fill='yellow'>$_pos=[0]</text><text x='82' y='385' fill='#3E8DDB'>data2</text><text x='140' y='385' fill='yellow'>$_pos=[1]</text><text x='82' y='420' fill='#3E8DDB'>data2</text><text x='140' y='420' fill='yellow'>$_pos=[2]</text></svg>",b:"var data={forA:[{childFor:[]},{childFor:[]},],forB:[0,1,2]};",c:"",d:1},"e-event":{a:'<div id="app"><div style="margin:20px"><p>x = {{x}}</p><button e-event="onclick:addition1">Click x++</button></div><div e-base="base" style="margin:20px"><p>y = {{y}}</p><button e-event="onclick:addition2">Click y+=2</button></div></div>',b:'var app=new Eng({el:document.getElementById("app"),data:{x:0,base:{y:1}},event:{addition1:function(){this.$_data.x++},addition2:function(){this.$_data.y+=2}}});',c:'<p># e-event ="onclick:function" 的属性值内不能包含空格,":" 号前为原生js方法,后面为event 内声明的事件</p><p># this.$_data : The data in the current \'base\' scope</p><p># this.$_gData : All the data</p><p># this.$_eng : Options/methods for all current components : ($_cache , $_el , $_event , $_setToGlobal , $_setToSelf , $_watcher , $_watcherFor)</p>',d:1},"e-event (1)":{a:'<div id="app" style="margin:30px"><p e-attr="class=color">Color</p>\r<button e-event="onclick:changeColor">change-color</button>\r</div>',b:'"# e-event with cache";"# The current demo uses the \'colorFlag\' Boolean value in \'cache\' to modify the \'class\' style through the DOM event";var app=new Eng({el:document.getElementById("app"),data:{color:"green"},cache:{colorFlag:true},event:{changeColor:function(){if(this.$_cache.colorFlag){this.$_cache.colorFlag=false;this.$_data.color="yellow"}else{this.$_cache.colorFlag=true;this.$_data.color="green"}}}});',c:"",d:1},"e-event (2)":{a:'<div id="app" style="margin:30px"><div e-for="forData" style="border:1px solid #ff0;margin:5px"><p>{{v}}</p><p e-base="base" style="margin-left:20px">{{v}}</p><button e-event="onclick:click">click {{$_index}}</button></div></div>',b:'"# e-event 与  e-for";"# Explain the \'this.$_data\' within the loop";var app=new Eng({el:document.getElementById("app"),data:{forData:[{v:"1",base:{v:"2"}},{v:"3",base:{v:"4"}}]},event:{click:function(){var v1,v2;v1=this.$_data.v;v2=this.$_data.base.v;"//The \'this.$_data\' in the loop is based on the currently loop array element, not based on \'base\'";this.$_data.v=v2;this.$_data.base.v=v1}}});',c:"",d:1}," ":{a:"",b:"",c:"",d:1},"0.8..":{a:"<p class='e_d'>finished</p>",b:"",c:"",d:2},"0.9..":{a:"<p class='e_d'>finishing</p>",b:"",c:"",d:2},"1.0..":{a:"<p class='e_d'>readying</p>",b:"",c:"",d:2},"Server support":{a:"<p class='e_d'>readying</p>",b:"",c:"",d:2},"outline":{a:"<p class='e_d'>1. A development version will be available when the version is stable</p><p class='e_d'>2. 后续,将会提供一个sever端的工具,支持将dom文本压缩成 Eng 可以识别的json对象,减少网络数据传输,加速dom和数据的首次生成渲染效率</p><p class='e_d'>3. 将 支持 \"组件行为\", 允许单独在页面内定义组件对象, Eng 会向服务端 或 本地 请求该对象的所有素材,生成完整的组件..</p><p class='e_d'>4. $_setToGlobal()和 $_setToSelf 将有可能将支持 写入e-id 和e-for 指令,如果有必要的话</p><p class='e_d'>5. 将 原生的 支持数据分页</p><p class='e_d'>6. 将 支持数据 撤销 和 重做操作, 允许记录一定步数的数据操作</p><p class='e_d'>7. 0.9版本中已经可以实现类似Excel的函数功能 ,将提供一套Eng专有的简洁的函数公式,简化复杂逻辑的表单关系表达</p><p class='e_d'>8. 将 支持 数据比对,仅提交已修改的数据,减少服务器端重复计算(有必要的话)</p>",b:"",c:"<p># Eng 做为超轻量化的数据渲染框架 , 最终完成版的本地端体积将会控制在 20kb左右或以内</p>",d:2},};console.warn("version: eng_0.9.1.beta");var $_src={count:0,"0":{a:0,b:"css",c:["https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/codemirror.min.css","https://cdn.bootcss.com/codemirror/5.29.0/codemirror.min.css"]},"1":{a:0,b:"css",c:["https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/theme/monokai.min.css","https://cdn.bootcss.com/codemirror/5.29.0/theme/monokai.min.css"]},"2":{a:0,b:"js",c:["https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.6.14/beautify.min.js","https://cdn.bootcss.com/js-beautify/1.6.14/beautify.min.js"]},"3":{a:0,b:"js",c:["https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.6.14/beautify-html.min.js","https://cdn.bootcss.com/js-beautify/1.6.14/beautify-html.min.js"]},"4":{a:0,b:"js",c:["https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/codemirror.min.js","https://cdn.bootcss.com/codemirror/5.29.0/codemirror.min.js"]}};var $_src2={"5":{a:0,b:"js",c:["https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/mode/javascript/javascript.min.js","https://cdn.bootcss.com/codemirror/5.29.0/mode/javascript/javascript.min.js"]},};var p=document.getElementsByTagName("head")[0],k;var $_script=function(p,c,a,z){var o,d;if(c[a].b=="js"){d=c[a].c[c[a].a];if(!d){return}o=document.createElement("script");o.setAttribute("type","text/javascript");o.setAttribute("src",d)}else{d=c[a].c[c[a].a];if(!d){return}o=document.createElement("link");o.setAttribute("rel","stylesheet");o.setAttribute("href",d)}c[a].a++;o.onerror=function(){p.removeChild(o);$_script(p,c,a)};o.onload=function(){var x=a!=5?c:z;x.count++;if(a==4){$_script(p,$_src2,5,$_src)}if(x.count==6){$_inint()}};p.appendChild(o)};for(k in $_src){if(k!="count"){$_script(p,$_src,k)}}var $_L0=[{m:"简介",s:"",c:["关于作者","default"]},{m:"版本说明",s:"",c:["0.8.*","0.9.*","0.9.1"]},{m:"API",s:"display:block",c:["示例","e-base","e-attr","e-html","e-id","e-input","e-change","e-event","e-for","---------","el","watcher","watcherFor","$_watcher","$_watcherFor","$_setToSelf","$_setToGlobal"]},{m:"进阶/技巧",c:["watcherFor (1)","watcherFor (2)","watcherFor (3)","watcherFor (4 坐标关系)","e-event (1)","e-event (2)","一个日历插件","更多技巧案例补充ing"]},{m:"版本进度",c:["0.8..","0.9..","1.0..","服务端支持搁置"]},{m:"版本预览",c:["概要"]},];var $_L1=[{m:"Synopsis",s:"",c:["About author","default"]},{m:"Version Description",s:"",c:["0.8.*","0.9.*","0.9.1"]},{m:"API",s:"display:block",c:["basic example","e-base","e-attr","e-html","e-id","e-input","e-change","e-event","e-for","---------","el","watcher","watcherFor","$_watcher","$_watcherFor","$_setToSelf","$_setToGlobal"]},{m:"advanced/skills",c:["watcherFor (1)","watcherFor (2)","watcherFor (3)","watcherFor (Coordinate relation)","e-event (1)","e-event (2)","More waiting"]},{m:"Version schedule",c:["0.8..","0.9..","1.0..","Server support"]},{m:"Version Preview",c:["outline"]},];var $_app=new Eng({el:document.getElementById("$_app"),data:{p:JSON.parse(JSON.stringify($_L0)),}});var $_set;var $_inint=function(){var L=2;var ddd=$_eng_data;var yuyan=document.getElementsByClassName("yuyan");while(L--){yuyan[L].index=L;yuyan[L].onclick=function(){var a=this.index;if(a){$_app.p=JSON.parse(JSON.stringify($_L1));ddd=$_eng_data2;c[0].getElementsByTagName("li")[1].click()}else{$_app.p=JSON.parse(JSON.stringify($_L0));ddd=$_eng_data}}}var p=document.getElementsByClassName("ppp");var c=document.getElementsByClassName("cul");var btn=document.getElementsByClassName("btn");var htm=document.getElementsByClassName("hinput");L=p.length;while(L--){p[L].index=L;if(L==2){p[L].openFlag=1,p[L].style.color="blue"}p[L].onclick=function(){var a,b,t=this;t.openFlag?(a="none",b="black",t.openFlag=0):(a="block",b="blue",t.openFlag=1);c[t.index].style.display=a;p[t.index].style.color=b};if(c[L]){c[L].onclick=function(e){var n=e.target.tagName,txt,a,b,c,d,f;if(n=="LI"){txt=e.target.textContent.trim();txt=ddd[txt];if(!txt){return}clearTimeout($_set);a=txt.a,b=txt.b,c=txt.c,d=txt.d,f=txt.e;editor[1].setValue(d==1?html_beautify(a,{indent_size:2}):"");editor[2].setValue(d==1?js_beautify(b,{indent_size:2}):"");s[2].value="";htm[1].innerHTML=c;if(d==1){btn[0].click()}if(e){editor[2].setValue(js_beautify(b,{indent_size:2}))}if(d==2){htm[0].innerHTML=a}}e.stopPropagation()}}}var s=document.getElementsByClassName("r-r");var editor=[];var kF;L=3;while(L--){s[L].index=L;if(L>0){editor[L]=(CodeMirror.fromTextArea(s[0],{lineNumbers:true,theme:"monokai",lineWrapping:true}));editor[L].setSize("100%","43%")}s[L].onfocus=function(){if(this.index==2){kF=1;if(err){err=0;s[2].style.color="white";s[2].value=""}}};s[L].onblur=function(){if(this.index==2){kF=0}}}var cache,cache2,err;btn[0].onclick=function(){htm[0].innerHTML=editor[1].getValue().trim();if(cache){cache.parentNode.removeChild(cache)}cache=document.createElement("script");cache.textContent=editor[2].getValue().trim();document.body.appendChild(cache)};c[0].getElementsByTagName("li")[1].click();document.body.onkeydown=function(e){if(e.keyCode==13&&kF){if(cache2){cache2.parentNode.removeChild(cache2)}cache2=document.createElement("script");cache2.textContent=s[2].value.trim();s[2].value="";s[2].blur();document.body.appendChild(cache2)}};window.onerror=function(m,u,l){s[2].style.color="#67FDDE";s[2].value=m.replace("Uncaught","");err=1}};